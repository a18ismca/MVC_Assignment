// <auto-generated />
using MVC_Assignment.DbData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_Assignment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220905091651_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVC_Assignment.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CountryId = 1,
                            Name = "Göteborg"
                        },
                        new
                        {
                            CityId = 2,
                            CountryId = 2,
                            Name = "Trebinje"
                        },
                        new
                        {
                            CityId = 3,
                            CountryId = 1,
                            Name = "Malmö"
                        },
                        new
                        {
                            CityId = 4,
                            CountryId = 2,
                            Name = "Stolac"
                        });
                });

            modelBuilder.Entity("MVC_Assignment.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Sweden"
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "Bosnia"
                        });
                });

            modelBuilder.Entity("MVC_Assignment.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Alisa",
                            PhoneNumber = 28356
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            Name = "Erik",
                            PhoneNumber = 67890
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            Name = "Ismet",
                            PhoneNumber = 12345
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            Name = "Åsa",
                            PhoneNumber = 54545
                        },
                        new
                        {
                            Id = 5,
                            CityId = 4,
                            Name = "Avdo",
                            PhoneNumber = 10545
                        },
                        new
                        {
                            Id = 6,
                            CityId = 4,
                            Name = "Senad",
                            PhoneNumber = 51111
                        });
                });

            modelBuilder.Entity("MVC_Assignment.Models.City", b =>
                {
                    b.HasOne("MVC_Assignment.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVC_Assignment.Models.Person", b =>
                {
                    b.HasOne("MVC_Assignment.Models.City", "City")
                        .WithMany("Inhabitants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVC_Assignment.Models.City", b =>
                {
                    b.Navigation("Inhabitants");
                });

            modelBuilder.Entity("MVC_Assignment.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
